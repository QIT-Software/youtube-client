{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/pages/login-page/login-page.component.ts","webpack:///src/app/auth/pages/login-page/login-page.component.html","webpack:///src/app/auth/services/user-login.service.ts"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","providers","LoginPageComponent","userToken","userLogin","router","logged","isLogged","subscribe","val","name","nativeElement","focus","deleteLogin","setLogin","value","pass","$event","code","navigate","escape","login","selector","templateUrl","styleUrls","UserLoginService","searchData","reqHttp","mess","showUp","getToken","length","set","token","delete","hide","showTimer","confirm","clear"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginPageComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\r\nimport { UserLoginService } from '@authService/user-login.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginPageComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule\r\n  ],\r\n  providers: [\r\n    UserLoginService,\r\n\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { AfterViewInit, Component, OnInit, ElementRef, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserTokenService } from '@coreService/user-token.service';\r\nimport { UserLoginService } from '@authService/user-login.service';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss']\r\n})\r\nexport class LoginPageComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('name') public name: ElementRef;\r\n  @ViewChild('pass') public pass: ElementRef;\r\n  public logged: boolean;\r\n\r\n  constructor(private userToken?: UserTokenService,\r\n              private userLogin?: UserLoginService,\r\n              private router?: Router) {\r\n    this.logged = this.userToken.isLogged();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.userToken.logged.subscribe((val) => {\r\n      this.logged = val;\r\n    });\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.name.nativeElement.focus();\r\n  }\r\n\r\n  public login(): void {\r\n    if (this.logged) {\r\n      this.userLogin.deleteLogin();\r\n    } else {\r\n      this.userLogin.setLogin(this.name.nativeElement.value, this.pass.nativeElement.value);\r\n    }\r\n  }\r\n\r\n  public escape($event: KeyboardEvent): void {\r\n    if ($event.code === 'Escape') {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"login\" (keyup)=\"escape($event)\">\r\n  <div class=\"wrapper\">\r\n    <h1>\r\n      Login\r\n    </h1>\r\n    <div class=\"login__username\">\r\n      <label for=\"username\">login</label>\r\n      <input id=\"username\" #name type=\"text\" >\r\n    </div>\r\n    <div class=\"login__pass\">\r\n      <label for=\"pass\">password</label>\r\n      <input id=\"pass\" #pass type=\"password\">\r\n    </div>\r\n    <div class=\"login__buttons\">\r\n      <button class=\"btn\" (click)=\"login()\" >{{logged ? 'Logout' : 'Login' }}</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SearchDataService } from '@coreService/search-data.service';\r\nimport { UserTokenService } from '@coreService/user-token.service';\r\nimport { RequestHttpService } from '@coreService/request-http.service';\r\nimport { MessageService } from '@coreService/message.service';\r\n\r\n@Injectable()\r\nexport class UserLoginService {\r\n\r\n  constructor(private userToken?: UserTokenService,\r\n              private searchData?: SearchDataService,\r\n              private router?: Router,\r\n              private reqHttp?: RequestHttpService,\r\n              private mess?: MessageService) { }\r\n\r\n  private confirm(name: string, pass: string): void {\r\n    this.mess.showUp('Loading...');\r\n    this.reqHttp.getToken(name, pass)\r\n      .subscribe((val: string) => {\r\n        if (val.length) {\r\n          this.userToken.set({ name: name, token: val });\r\n        } else {\r\n          this.userToken.delete();\r\n        }\r\n        this.router.navigate(['/']);\r\n        this.mess.hide();\r\n      },         () => { this.mess.showTimer('User is not exist'); }\r\n      );\r\n  }\r\n\r\n  public setLogin(name: string, pass: string): void {\r\n    this.confirm(name, pass);\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  public deleteLogin(): void {\r\n    this.userToken.delete();\r\n    this.searchData.clear();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n}\r\n"]}